val SDL = require "SDL"
val IMG = require "SDL.image"

val sdl = require "atmos.env.sdl"

defer {
    IMG.quit()
    SDL.quit()
}

val WIN = SDL.createWindow @{
	title  = "Birds - 01 (task)",
	width  = 640,
	height = 480,
    flags  = @{ SDL.flags.OpenGL },
} --> assert

val REN = SDL.createRenderer(WIN,-1) --> assert
set sdl.ren = REN

val UP = assert(REN::createTextureFromSurface(sfc)) where {
    sfc = IMG.load("res/bird-up.png") --> assert
}

val DN = assert(REN::createTextureFromSurface(sfc)) where {
    sfc = IMG.load("res/bird-dn.png") --> assert
}

val W,H = do {
    val _,_,a,b = UP::query()
    val _,_,c,d = DN::query()
    assert((a==c) && (b==d))
    (a,b)
}

math.randomseed()

func Bird (y, speed) {
    val rect = @{ x=0, y=y, w=W, h=H }
    set pub = @{
        rect  = rect,
        alive = true,
    }
    var img = DN
    watching (func () { rect.x>640 }) {
        watching :collided {
            par {
                var ang = 0
                every :sdl.step {
                    val v = it * speed
                    set rect.x = math.floor(rect.x + (v/1000))
                    set rect.y = math.floor(y - ((speed/5) * math.sin(ang)))
                    set ang = ang + ((3.14*v)/100000)
                    val tmp = ((ang+(3.14/2))/3.14) --> math.floor
                    set img = if (tmp%2)==0 => UP => DN
                }
            } with {
                every :sdl.draw {
                    REN::copy(img, nil, rect)
                }
            }
        }
        set pub.alive = false
        watching (func () { rect.y>(480-H) }) {
            par {
                every :sdl.step {
                    set rect.y = (rect.y + (it * 0.5)) --> math.floor
                }
            } with {
                every :sdl.draw {
                    REN::copy(DN, nil, rect)
                }
            }
        }
        watching @1 {
            loop {
                await @.100
                watching @.100 {
                    every :sdl.draw {
                        REN::copy(DN, nil, rect)
                    }
                }
            }
        }
    }
}

par {
    toggle :Show {
        pin birds = tasks(5)
        par {
            every @.500 {
                spawn [birds] Bird(math.random(0,480), 100 + math.random(0,100))
            }
        } with {
            every :sdl.step {
                loop _,b1 in birds {
                    loop _,b2 in birds {
                        val col = (b1!=b2) && b1.pub.alive && b2.pub.alive && sdl.rect_vs_rect(b1.pub.rect, b2.pub.rect)
                        if col {
                            emit [b1] :collided
                            emit [b2] :collided
                            break
                        }
                    }
                }
            }
        } with {
            loop {
                val _,_,bird = catch :Track {
                    every SDL.event.MouseButtonDown {
                        loop _,b in birds {
                            if b.pub.alive && sdl.point_vs_rect(it,b.pub.rect) {
                                throw('Track', b)
                            }
                        }
                    }
                }
                watching bird {
                    val l = @{
                        x1=640/2, y1=480,
                    }
                    every :sdl.draw {
                        set l.x2 = bird.pub.rect.x + (W/2)
                        set l.y2 = bird.pub.rect.y + (H/2)
                        REN::setDrawColor(0xFFFFFFFF)
                        REN::drawLine(l)
                        REN::setDrawColor(0x00000000)
                    }
                }
            }
        }
    }
} with {
    loop {
        await(SDL.event.KeyDown, 'P')
        emit('Show', false)
        watching SDL.event.KeyDown, 'P' {
            val sfc = assert(IMG.load("res/pause.png"))
            val img = assert(REN::createTextureFromSurface(sfc))
            val _,_,w,h = img::query()
            val r = @{
                x = ((640/2) - (w/2)) --> math.floor,
                y = ((480/2) - (h/2)) --> math.floor,
                w=w, h=h,
            }
            every :sdl.draw {
                REN::copy(img, nil, r)
            }
        }
        emit('Show', true)
    }
}
