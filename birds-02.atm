val sdl = require "atmos.env.sdl"
val SDL = require "SDL"
val IMG = require "SDL.image"

val WIN = SDL.createWindow @{
	title  = "Birds - 02 (scope)",
	width  = 640,
	height = 480,
    flags  = @{ SDL.flags.OpenGL },
} --> assert

val REN = SDL.createRenderer(WIN,-1) --> assert
set sdl.ren = REN

val UP = tex where {
    sfc = IMG.load("res/bird-up.png") --> assert
    tex = REN::createTextureFromSurface(sfc) --> assert
}

val DN = tex where {
    sfc = IMG.load("res/bird-dn.png") --> assert
    tex = REN::createTextureFromSurface(sfc) --> assert
}

val W,H = do {
    val _,_,a,b = UP::query()
    val _,_,c,d = DN::query()
    assert((a==c) && (b==d))
    (a,b)
}

func Bird (y, speed) {
    var xx  = 0
    var yy  = y
    var img = DN
    par {
        var ang = 0
        every _,ms in :clock {
            val v = ms * speed
            set xx = xx + (v/1000) --> math.floor
            set yy = y - ((speed/5) * math.sin(ang)) --> math.floor
            set ang = ang + ((3.14*v)/100000)
            val tmp = ((ang+(3.14/2)) / 3.14) --> math.floor
            set img = if (tmp%2)==0 => UP => DN
        }
    } with {
        every :sdl.draw {
            REN::copy(img, nil, @{x=xx,y=yy,w=W,h=H})
        }
    }
}

loop {
    spawn Bird(150, 100)
    spawn Bird(350, 200)
    await(SDL.event.MouseButtonDown)
}
