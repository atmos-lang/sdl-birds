val SDL = require "SDL"
val IMG = require "SDL.image"

val sdl = require "atmos.env.sdl"

defer {
    IMG.quit()
    SDL.quit()
}

val WIN = assert(SDL.createWindow @{
	title  = "Birds - 01 (task)",
	width  = 640,
	height = 480,
    flags  = @{ SDL.flags.OpenGL },
})
val REN = assert(SDL.createRenderer(WIN,-1))
set sdl.ren = REN

val UP = assert(REN::createTextureFromSurface(sfc)) where {
    sfc = assert(IMG.load("res/bird-up.png"))
}

val DN = assert(REN::createTextureFromSurface(sfc)) where {
    sfc = assert(IMG.load("res/bird-dn.png"))
}

val W,H = do {
    val _,_,a,b = UP::query()
    val _,_,c,d = DN::query()
    assert((a==c) && (b==d))
    (a,b)
}

func Bird (y, speed) {
    var xx  = 0
    var yy  = y
    var img = DN
    par {
        var ang = 0
        every :sdl.step {
            val v = it * speed
            set xx = xx + (v/1000)
            set yy = y - ((speed/5) * math.sin(ang))
            set ang = ang + ((3.14*v)/100000)
            val tmp = ((ang+(3.14/2)) / 3.14) --> math.floor
            set img = if (tmp%2)==0 => UP => DN
        }
    } with {
        every :sdl.draw {
            REN::copy(img, nil, @{
                x = math.floor(xx),
                y = math.floor(yy),
                w = W,
                h = H
            })
        }
    }
}

spawn Bird(150, 100)
spawn Bird(350, 200)
await(false)
