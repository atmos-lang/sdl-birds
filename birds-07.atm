val SDL = require "SDL"
val IMG = require "SDL.image"

val sdl = require "atmos.env.sdl"

defer {
    IMG.quit()
    SDL.quit()
}

val WIN = SDL.createWindow @{
	title  = "Birds - 07 (collision)",
	width  = 640,
	height = 480,
    flags  = @{ SDL.flags.OpenGL },
} --> assert

val REN = SDL.createRenderer(WIN,-1) --> assert
set sdl.ren = REN

val UP = tex where {
    sfc = IMG.load("res/bird-up.png") --> assert
    tex = REN::createTextureFromSurface(sfc) --> assert
}

val DN = tex where {
    sfc = IMG.load("res/bird-dn.png") --> assert
    tex = REN::createTextureFromSurface(sfc) --> assert
}

val W,H = do {
    val _,_,a,b = UP::query()
    val _,_,c,d = DN::query()
    assert((a==c) && (b==d))
    (a,b)
}

math.randomseed()

func Bird (y, speed) {
    val rect = @{ x=0, y=y, w=W, h=H }
    set pub = @{
        rect = rect,
    }
    var img = DN
    watching \e{ (rect.x>640) || (e==:collided) } {
        par {
            var ang = 0
            every _,ms in :clock {
                val v = ms * speed
                set rect.x = (rect.x + (v/1000)) --> math.floor
                set rect.y = (y - ((speed/5) * math.sin(ang))) --> math.floor
                set ang = ang + ((3.14*v)/100000)
                val tmp = ((ang+(3.14/2))/3.14) --> math.floor
                set img = if (tmp%2)==0 => UP => DN
            }
        } with {
            every :sdl.draw {
                REN::copy(img, nil, rect)
            }
        }
    }
}

loop {
    pin birds = tasks(5)
    par {
        every @.500 {
            spawn [birds] Bird(math.random(0,480), 100 + math.random(0,100))
        }
    } with {
        every :clock {
            loop _,b1 in birds {
                loop _,b2 in birds {
                    val col = (b1!=b2) && sdl.rect_vs_rect(b1.pub.rect, b2.pub.rect)
                    if col {
                        emit [b1] :collided
                        emit [b2] :collided
                        break
                    }
                }
            }
        }
    }
}
